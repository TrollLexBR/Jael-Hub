local Library = {}

-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Variáveis globais
local DrawingObjects = {}
local ActiveWindow = nil

-- Função para criar texto
local function CreateText(properties)
    local text = Drawing.new("Text")
    text.Text = properties.Text or ""
    text.Color = properties.Color or Color3.new(1, 1, 1)
    text.Size = properties.Size or 13
    text.Position = properties.Position or Vector2.new(0, 0)
    text.Visible = properties.Visible or true
    text.Center = properties.Center or false
    text.Outline = properties.Outline or false
    text.OutlineColor = properties.OutlineColor or Color3.new(0, 0, 0)
    text.Font = properties.Font or 2 -- 2 = System font
    
    return text
end

function Library:ToggleUI()
    if ActiveWindow then
        ActiveWindow.Visible = not ActiveWindow.Visible
        for _, obj in pairs(DrawingObjects) do
            if obj.Visible ~= nil then
                obj.Visible = ActiveWindow.Visible
            end
        end
    end
end

function Library:NewWindow(hubName, gameName, version, discord)
    -- Limpar objetos anteriores
    for _, obj in pairs(DrawingObjects) do
        obj:Remove()
    end
    DrawingObjects = {}

    hubName = hubName or "Jael Library"
    gameName = gameName or "Baseplate"
    version = version or "v1.0"
    discord = discord or "discord/00000"

    local GUI = {}
    local windowPosition = Vector2.new(200, 100)
    local windowSize = Vector2.new(683, 464)
    
    -- Main Window Frame
    GUI.MainFrame = Drawing.new("Square")
    GUI.MainFrame.Filled = true
    GUI.MainFrame.Color = Color3.fromRGB(26, 26, 26)
    GUI.MainFrame.Size = windowSize
    GUI.MainFrame.Position = windowPosition
    GUI.MainFrame.Visible = true
    table.insert(DrawingObjects, GUI.MainFrame)

    -- SideBar
    GUI.SideBar = Drawing.new("Square")
    GUI.SideBar.Filled = true
    GUI.SideBar.Color = Color3.fromRGB(36, 36, 36)
    GUI.SideBar.Size = Vector2.new(189, 464)
    GUI.SideBar.Position = windowPosition
    GUI.SideBar.Visible = true
    table.insert(DrawingObjects, GUI.SideBar)

    -- Hub Name Label
    GUI.HubNameLabel = CreateText({
        Text = hubName,
        Color = Color3.fromRGB(255, 255, 255),
        Size = 20,
        Position = windowPosition + Vector2.new(15, 15),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.HubNameLabel)

    -- Game Name Label
    GUI.GameNameLabel = CreateText({
        Text = gameName,
        Color = Color3.fromRGB(102, 5, 172),
        Size = 16,
        Position = windowPosition + Vector2.new(15, 45),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.GameNameLabel)

    -- Top Bar
    GUI.TopBar = Drawing.new("Square")
    GUI.TopBar.Filled = true
    GUI.TopBar.Color = Color3.fromRGB(36, 36, 36)
    GUI.TopBar.Size = Vector2.new(490, 41)
    GUI.TopBar.Position = windowPosition + Vector2.new(189, 0)
    GUI.TopBar.Visible = true
    table.insert(DrawingObjects, GUI.TopBar)

    -- Discord Label
    GUI.DiscordLabel = CreateText({
        Text = discord,
        Color = Color3.fromRGB(120, 138, 255),
        Size = 14,
        Position = windowPosition + Vector2.new(189 + 350, 15),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.DiscordLabel)

    -- Version Label
    GUI.VersionLabel = CreateText({
        Text = version,
        Color = Color3.fromRGB(255, 255, 255),
        Size = 12,
        Position = windowPosition + Vector2.new(189 + 400, 15),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.VersionLabel)

    -- Home Button
    GUI.HomeButton = Drawing.new("Square")
    GUI.HomeButton.Filled = true
    GUI.HomeButton.Color = Color3.fromRGB(102, 5, 172)
    GUI.HomeButton.Size = Vector2.new(135, 35)
    GUI.HomeButton.Position = windowPosition + Vector2.new(27, 100)
    GUI.HomeButton.Visible = true
    table.insert(DrawingObjects, GUI.HomeButton)

    GUI.HomeButtonText = CreateText({
        Text = "Home",
        Color = Color3.fromRGB(255, 255, 255),
        Size = 14,
        Position = windowPosition + Vector2.new(40, 108),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.HomeButtonText)

    -- Home Frame
    GUI.HomeFrame = Drawing.new("Square")
    GUI.HomeFrame.Filled = true
    GUI.HomeFrame.Color = Color3.fromRGB(36, 36, 36)
    GUI.HomeFrame.Size = Vector2.new(490, 419)
    GUI.HomeFrame.Position = windowPosition + Vector2.new(189, 41)
    GUI.HomeFrame.Visible = true
    table.insert(DrawingObjects, GUI.HomeFrame)

    -- Welcome Label
    GUI.WelcomeLabel = CreateText({
        Text = "Welcome, "..LocalPlayer.DisplayName.."!",
        Color = Color3.fromRGB(255, 255, 255),
        Size = 18,
        Position = windowPosition + Vector2.new(200, 60),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.WelcomeLabel)

    -- Bar separator
    GUI.Bar = Drawing.new("Square")
    GUI.Bar.Filled = true
    GUI.Bar.Color = Color3.fromRGB(102, 5, 172)
    GUI.Bar.Size = Vector2.new(477, 1)
    GUI.Bar.Position = windowPosition + Vector2.new(195, 90)
    GUI.Bar.Visible = true
    table.insert(DrawingObjects, GUI.Bar)

    -- Features Frame
    GUI.FeaturesFrame = Drawing.new("Square")
    GUI.FeaturesFrame.Filled = true
    GUI.FeaturesFrame.Color = Color3.fromRGB(41, 41, 41)
    GUI.FeaturesFrame.Size = Vector2.new(477, 353)
    GUI.FeaturesFrame.Position = windowPosition + Vector2.new(195, 100)
    GUI.FeaturesFrame.Visible = true
    table.insert(DrawingObjects, GUI.FeaturesFrame)

    -- Sistema de drag
    local dragging = false
    local dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        windowPosition = startPos + delta
        
        -- Atualizar todas as posições
        GUI.MainFrame.Position = windowPosition
        GUI.SideBar.Position = windowPosition
        GUI.HubNameLabel.Position = windowPosition + Vector2.new(15, 15)
        GUI.GameNameLabel.Position = windowPosition + Vector2.new(15, 45)
        GUI.TopBar.Position = windowPosition + Vector2.new(189, 0)
        GUI.DiscordLabel.Position = windowPosition + Vector2.new(189 + 350, 15)
        GUI.VersionLabel.Position = windowPosition + Vector2.new(189 + 400, 15)
        GUI.HomeButton.Position = windowPosition + Vector2.new(27, 100)
        GUI.HomeButtonText.Position = windowPosition + Vector2.new(40, 108)
        GUI.HomeFrame.Position = windowPosition + Vector2.new(189, 41)
        GUI.WelcomeLabel.Position = windowPosition + Vector2.new(200, 60)
        GUI.Bar.Position = windowPosition + Vector2.new(195, 90)
        GUI.FeaturesFrame.Position = windowPosition + Vector2.new(195, 100)
    end

    GUI.TopBarInput = Drawing.new("Square")
    GUI.TopBarInput.Filled = true
    GUI.TopBarInput.Color = Color3.fromRGB(255, 255, 255)
    GUI.TopBarInput.Size = Vector2.new(490, 41)
    GUI.TopBarInput.Position = windowPosition + Vector2.new(189, 0)
    GUI.TopBarInput.Visible = false
    GUI.TopBarInput.Transparency = 0
    table.insert(DrawingObjects, GUI.TopBarInput)

    -- Input handling para drag
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = input.Position
            local topBarPos = GUI.TopBarInput.Position
            local topBarSize = GUI.TopBarInput.Size
            
            if mousePos.X >= topBarPos.X and mousePos.X <= topBarPos.X + topBarSize.X and
               mousePos.Y >= topBarPos.Y and mousePos.Y <= topBarPos.Y + topBarSize.Y then
                dragging = true
                dragStart = input.Position
                startPos = windowPosition
            end
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            update(input)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    ActiveWindow = GUI.MainFrame

    function GUI:FeatureNewGame(gameName)
        gameName = gameName or "- New Game"
        local NewGame = {}
        
        NewGame.Text = CreateText({
            Text = gameName,
            Color = Color3.fromRGB(255, 255, 255),
            Size = 16,
            Position = GUI.FeaturesFrame.Position + Vector2.new(10, 10),
            Visible = true
        })
        table.insert(DrawingObjects, NewGame.Text)
        
        return NewGame
    end

    function GUI:FeatureNewFeature(featureLabel)
        featureLabel = featureLabel or "- New Feature"
        local feature = {}
        
        feature.Text = CreateText({
            Text = featureLabel,
            Color = Color3.fromRGB(255, 255, 255),
            Size = 14,
            Position = GUI.FeaturesFrame.Position + Vector2.new(20, 30),
            Visible = true
        })
        table.insert(DrawingObjects, feature.Text)
        
        return feature
    end

    function GUI:NewTab(tabName)
        tabName = tabName or "New Tab"
        local Tab = {}
        Tab.DrawingObjects = {}
        
        -- Criar botão da tab
        Tab.Button = Drawing.new("Square")
        Tab.Button.Filled = true
        Tab.Button.Color = Color3.fromRGB(35, 35, 35)
        Tab.Button.Size = Vector2.new(135, 35)
        Tab.Button.Position = windowPosition + Vector2.new(27, 150)
        Tab.Button.Visible = true
        table.insert(DrawingObjects, Tab.Button)
        table.insert(Tab.DrawingObjects, Tab.Button)

        Tab.ButtonText = CreateText({
            Text = tabName,
            Color = Color3.fromRGB(117, 117, 117),
            Size = 14,
            Position = windowPosition + Vector2.new(40, 158),
            Visible = true
        })
        table.insert(DrawingObjects, Tab.ButtonText)
        table.insert(Tab.DrawingObjects, Tab.ButtonText)

        -- Tab Frame
        Tab.Frame = Drawing.new("Square")
        Tab.Frame.Filled = true
        Tab.Frame.Color = Color3.fromRGB(36, 36, 36)
        Tab.Frame.Size = Vector2.new(490, 419)
        Tab.Frame.Position = windowPosition + Vector2.new(189, 41)
        Tab.Frame.Visible = false
        table.insert(DrawingObjects, Tab.Frame)
        table.insert(Tab.DrawingObjects, Tab.Frame)

        -- Sistema para posicionar elementos na tab
        Tab.CurrentPosition = Vector2.new(5, 5)

        function Tab:NewLabel(label)
            label = label or "New Label"
            local Label = {}
            
            Label.Text = CreateText({
                Text = label,
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Position = self.Frame.Position + self.CurrentPosition,
                Visible = self.Frame.Visible
            })
            table.insert(DrawingObjects, Label.Text)
            table.insert(self.DrawingObjects, Label.Text)
            
            self.CurrentPosition = self.CurrentPosition + Vector2.new(0, 25)
            
            return Label
        end

        function Tab:NewButton(label, callback)
            label = label or "New Button"
            callback = callback or function() end
            
            local Button = {}
            local buttonSize = Vector2.new(478, 35)
            
            -- Background do botão
            Button.Background = Drawing.new("Square")
            Button.Background.Filled = true
            Button.Background.Color = Color3.fromRGB(41, 41, 41)
            Button.Background.Size = buttonSize
            Button.Background.Position = self.Frame.Position + self.CurrentPosition
            Button.Background.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Button.Background)
            table.insert(self.DrawingObjects, Button.Background)

            -- Texto do botão
            Button.Text = CreateText({
                Text = label,
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Position = self.Frame.Position + self.CurrentPosition + Vector2.new(10, 10),
                Visible = self.Frame.Visible
            })
            table.insert(DrawingObjects, Button.Text)
            table.insert(self.DrawingObjects, Button.Text)

            -- Área clicável (invisível)
            Button.ClickArea = Drawing.new("Square")
            Button.ClickArea.Filled = true
            Button.ClickArea.Color = Color3.fromRGB(255, 255, 255)
            Button.ClickArea.Size = buttonSize
            Button.ClickArea.Position = self.Frame.Position + self.CurrentPosition
            Button.ClickArea.Visible = false
            Button.ClickArea.Transparency = 0
            table.insert(DrawingObjects, Button.ClickArea)
            table.insert(self.DrawingObjects, Button.ClickArea)

            -- Evento de clique
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and self.Frame.Visible then
                    local mousePos = input.Position
                    if mousePos.X >= Button.ClickArea.Position.X and mousePos.X <= Button.ClickArea.Position.X + Button.ClickArea.Size.X and
                       mousePos.Y >= Button.ClickArea.Position.Y and mousePos.Y <= Button.ClickArea.Position.Y + Button.ClickArea.Size.Y then
                        callback()
                        -- Feedback visual
                        Button.Background.Color = Color3.fromRGB(102, 5, 172)
                        wait(0.1)
                        Button.Background.Color = Color3.fromRGB(41, 41, 41)
                    end
                end
            end)

            self.CurrentPosition = self.CurrentPosition + Vector2.new(0, buttonSize.Y + 5)
            
            return Button
        end

        function Tab:NewSlider(label, min, max, default, callback)
            label = label or "New Slider"
            min = min or 0
            max = max or 100
            default = default or 50
            callback = callback or function() end

            local Slider = {
                Value = default,
                Min = min,
                Max = max
            }

            local sliderSize = Vector2.new(478, 50)
            
            -- Background do slider
            Slider.Background = Drawing.new("Square")
            Slider.Background.Filled = true
            Slider.Background.Color = Color3.fromRGB(41, 41, 41)
            Slider.Background.Size = sliderSize
            Slider.Background.Position = self.Frame.Position + self.CurrentPosition
            Slider.Background.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Slider.Background)
            table.insert(self.DrawingObjects, Slider.Background)

            -- Label do slider
            Slider.Label = CreateText({
                Text = label,
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Position = self.Frame.Position + self.CurrentPosition + Vector2.new(10, 5),
                Visible = self.Frame.Visible
            })
            table.insert(DrawingObjects, Slider.Label)
            table.insert(self.DrawingObjects, Slider.Label)

            -- Valor atual
            Slider.ValueText = CreateText({
                Text = tostring(default),
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Position = self.Frame.Position + self.CurrentPosition + Vector2.new(sliderSize.X - 40, 5),
                Visible = self.Frame.Visible
            })
            table.insert(DrawingObjects, Slider.ValueText)
            table.insert(self.DrawingObjects, Slider.ValueText)

            -- Track do slider
            Slider.Track = Drawing.new("Square")
            Slider.Track.Filled = true
            Slider.Track.Color = Color3.fromRGB(36, 36, 36)
            Slider.Track.Size = Vector2.new(sliderSize.X - 20, 15)
            Slider.Track.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(10, 25)
            Slider.Track.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Slider.Track)
            table.insert(self.DrawingObjects, Slider.Track)

            -- Progresso do slider
            local initialProgress = ((default - min) / (max - min)) * (sliderSize.X - 20)
            Slider.Progress = Drawing.new("Square")
            Slider.Progress.Filled = true
            Slider.Progress.Color = Color3.fromRGB(102, 5, 172)
            Slider.Progress.Size = Vector2.new(initialProgress, 15)
            Slider.Progress.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(10, 25)
            Slider.Progress.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Slider.Progress)
            table.insert(self.DrawingObjects, Slider.Progress)

            -- Área clicável
            Slider.ClickArea = Drawing.new("Square")
            Slider.ClickArea.Filled = true
            Slider.ClickArea.Color = Color3.fromRGB(255, 255, 255)
            Slider.ClickArea.Size = Vector2.new(sliderSize.X - 20, 15)
            Slider.ClickArea.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(10, 25)
            Slider.ClickArea.Visible = false
            Slider.ClickArea.Transparency = 0
            table.insert(DrawingObjects, Slider.ClickArea)
            table.insert(self.DrawingObjects, Slider.ClickArea)

            -- Função para atualizar o slider
            function Slider:SetValue(value)
                value = math.clamp(value, min, max)
                self.Value = value
                local progressWidth = ((value - min) / (max - min)) * (sliderSize.X - 20)
                self.Progress.Size = Vector2.new(progressWidth, 15)
                self.ValueText.Text = tostring(math.floor(value))
                callback(value)
            end

            -- Interação
            local dragging = false
            
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and self.Frame.Visible then
                    local mousePos = input.Position
                    if mousePos.X >= Slider.ClickArea.Position.X and mousePos.X <= Slider.ClickArea.Position.X + Slider.ClickArea.Size.X and
                       mousePos.Y >= Slider.ClickArea.Position.Y and mousePos.Y <= Slider.ClickArea.Position.Y + Slider.ClickArea.Size.Y then
                        dragging = true
                        local relativeX = (mousePos.X - Slider.Track.Position.X) / Slider.Track.Size.X
                        local value = min + ((max - min) * math.clamp(relativeX, 0, 1))
                        Slider:SetValue(value)
                    end
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = input.Position
                    local relativeX = (mousePos.X - Slider.Track.Position.X) / Slider.Track.Size.X
                    local value = min + ((max - min) * math.clamp(relativeX, 0, 1))
                    Slider:SetValue(math.floor(value))
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            self.CurrentPosition = self.CurrentPosition + Vector2.new(0, sliderSize.Y + 5)
            
            return Slider
        end

        function Tab:NewToggle(label, callback)
            local State = false
            label = label or "New Toggle"
            callback = callback or function() end

            local Toggle = {}
            local toggleSize = Vector2.new(478, 35)
            
            -- Background do toggle
            Toggle.Background = Drawing.new("Square")
            Toggle.Background.Filled = true
            Toggle.Background.Color = Color3.fromRGB(41, 41, 41)
            Toggle.Background.Size = toggleSize
            Toggle.Background.Position = self.Frame.Position + self.CurrentPosition
            Toggle.Background.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Toggle.Background)
            table.insert(self.DrawingObjects, Toggle.Background)

            -- Label do toggle
            Toggle.Label = CreateText({
                Text = label,
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Position = self.Frame.Position + self.CurrentPosition + Vector2.new(10, 10),
                Visible = self.Frame.Visible
            })
            table.insert(DrawingObjects, Toggle.Label)
            table.insert(self.DrawingObjects, Toggle.Label)

            -- Toggle switch
            Toggle.Switch = Drawing.new("Square")
            Toggle.Switch.Filled = true
            Toggle.Switch.Color = Color3.fromRGB(36, 36, 36)
            Toggle.Switch.Size = Vector2.new(60, 20)
            Toggle.Switch.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(toggleSize.X - 70, 8)
            Toggle.Switch.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Toggle.Switch)
            table.insert(self.DrawingObjects, Toggle.Switch)

            -- Toggle indicator
            Toggle.Indicator = Drawing.new("Square")
            Toggle.Indicator.Filled = true
            Toggle.Indicator.Color = Color3.fromRGB(255, 81, 81)
            Toggle.Indicator.Size = Vector2.new(25, 20)
            Toggle.Indicator.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(toggleSize.X - 45, 8)
            Toggle.Indicator.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Toggle.Indicator)
            table.insert(self.DrawingObjects, Toggle.Indicator)

            -- Área clicável
            Toggle.ClickArea = Drawing.new("Square")
            Toggle.ClickArea.Filled = true
            Toggle.ClickArea.Color = Color3.fromRGB(255, 255, 255)
            Toggle.ClickArea.Size = Vector2.new(60, 20)
            Toggle.ClickArea.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(toggleSize.X - 70, 8)
            Toggle.ClickArea.Visible = false
            Toggle.ClickArea.Transparency = 0
            table.insert(DrawingObjects, Toggle.ClickArea)
            table.insert(self.DrawingObjects, Toggle.ClickArea)

            -- Função para alternar estado
            function Toggle:SetValue(value)
                State = value
                if value then
                    self.Indicator.Color = Color3.fromRGB(2, 255, 108)
                    self.Indicator.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(toggleSize.X - 70, 8)
                else
                    self.Indicator.Color = Color3.fromRGB(255, 81, 81)
                    self.Indicator.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(toggleSize.X - 45, 8)
                end
                callback(State)
            end

            -- Evento de clique
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and self.Frame.Visible then
                    local mousePos = input.Position
                    if mousePos.X >= Toggle.ClickArea.Position.X and mousePos.X <= Toggle.ClickArea.Position.X + Toggle.ClickArea.Size.X and
                       mousePos.Y >= Toggle.ClickArea.Position.Y and mousePos.Y <= Toggle.ClickArea.Position.Y + Toggle.ClickArea.Size.Y then
                        Toggle:SetValue(not State)
                    end
                end
            end)

            self.CurrentPosition = self.CurrentPosition + Vector2.new(0, toggleSize.Y + 5)
            
            return Toggle
        end

        function Tab:NewBar()
            local Bar = {}
            local barSize = Vector2.new(478, 2)
            
            Bar.Line = Drawing.new("Square")
            Bar.Line.Filled = true
            Bar.Line.Color = Color3.fromRGB(102, 5, 172)
            Bar.Line.Size = barSize
            Bar.Line.Position = self.Frame.Position + self.CurrentPosition
            Bar.Line.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Bar.Line)
            table.insert(self.DrawingObjects, Bar.Line)

            self.CurrentPosition = self.CurrentPosition + Vector2.new(0, barSize.Y + 5)
            
            return Bar
        end

        function Tab:NewKeybind(label, key, callback)
            key = key or "None"
            label = label or "New Keybind"
            callback = callback or function() end

            local listening = false
            local Keybind = {}
            local keybindSize = Vector2.new(478, 35)
            
            -- Background do keybind
            Keybind.Background = Drawing.new("Square")
            Keybind.Background.Filled = true
            Keybind.Background.Color = Color3.fromRGB(41, 41, 41)
            Keybind.Background.Size = keybindSize
            Keybind.Background.Position = self.Frame.Position + self.CurrentPosition
            Keybind.Background.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Keybind.Background)
            table.insert(self.DrawingObjects, Keybind.Background)

            -- Label do keybind
            Keybind.Label = CreateText({
                Text = label,
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Position = self.Frame.Position + self.CurrentPosition + Vector2.new(10, 10),
                Visible = self.Frame.Visible
            })
            table.insert(DrawingObjects, Keybind.Label)
            table.insert(self.DrawingObjects, Keybind.Label)

            -- Botão do keybind
            Keybind.KeyButton = Drawing.new("Square")
            Keybind.KeyButton.Filled = true
            Keybind.KeyButton.Color = Color3.fromRGB(36, 36, 36)
            Keybind.KeyButton.Size = Vector2.new(80, 20)
            Keybind.KeyButton.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(keybindSize.X - 90, 8)
            Keybind.KeyButton.Visible = self.Frame.Visible
            table.insert(DrawingObjects, Keybind.KeyButton)
            table.insert(self.DrawingObjects, Keybind.KeyButton)

            -- Texto da tecla
            Keybind.KeyText = CreateText({
                Text = key,
                Color = Color3.fromRGB(255, 255, 255),
                Size = 12,
                Position = self.Frame.Position + self.CurrentPosition + Vector2.new(keybindSize.X - 85, 12),
                Visible = self.Frame.Visible
            })
            table.insert(DrawingObjects, Keybind.KeyText)
            table.insert(self.DrawingObjects, Keybind.KeyText)

            -- Área clicável
            Keybind.ClickArea = Drawing.new("Square")
            Keybind.ClickArea.Filled = true
            Keybind.ClickArea.Color = Color3.fromRGB(255, 255, 255)
            Keybind.ClickArea.Size = Vector2.new(80, 20)
            Keybind.ClickArea.Position = self.Frame.Position + self.CurrentPosition + Vector2.new(keybindSize.X - 90, 8)
            Keybind.ClickArea.Visible = false
            Keybind.ClickArea.Transparency = 0
            table.insert(DrawingObjects, Keybind.ClickArea)
            table.insert(self.DrawingObjects, Keybind.ClickArea)

            -- Função para iniciar escuta
            function Keybind:StartListening()
                listening = true
                self.KeyText.Text = "..."
                self.KeyButton.Color = Color3.fromRGB(102, 5, 172)
            end

            -- Função para parar escuta
            function Keybind:StopListening(newKey)
                listening = false
                self.KeyText.Text = newKey or key
                self.KeyButton.Color = Color3.fromRGB(36, 36, 36)
                if newKey then
                    key = newKey
                    callback(newKey)
                end
            end

            -- Evento de clique no botão
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and self.Frame.Visible then
                    local mousePos = input.Position
                    if mousePos.X >= Keybind.ClickArea.Position.X and mousePos.X <= Keybind.ClickArea.Position.X + Keybind.ClickArea.Size.X and
                       mousePos.Y >= Keybind.ClickArea.Position.Y and mousePos.Y <= Keybind.ClickArea.Position.Y + Keybind.ClickArea.Size.Y then
                        Keybind:StartListening()
                    end
                end
            end)

            -- Evento de captura de tecla
            UserInputService.InputBegan:Connect(function(input)
                if listening then
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        Keybind:StopListening(input.KeyCode.Name)
                    elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Keybind:StopListening("MouseButton1")
                    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                        Keybind:StopListening("MouseButton2")
                    elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                        Keybind:StopListening("MouseButton3")
                    end
                else
                    -- Executar callback quando a tecla é pressionada
                    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode.Name == key then
                        callback(key)
                    end
                end
            end)

            self.CurrentPosition = self.CurrentPosition + Vector2.new(0, keybindSize.Y + 5)
            
            return Keybind
        end

        -- Evento para mostrar/ocultar a tab
        Tab.Button.ClickArea = Drawing.new("Square")
        Tab.Button.ClickArea.Filled = true
        Tab.Button.ClickArea.Color = Color3.fromRGB(255, 255, 255)
        Tab.Button.ClickArea.Size = Vector2.new(135, 35)
        Tab.Button.ClickArea.Position = windowPosition + Vector2.new(27, 150)
        Tab.Button.ClickArea.Visible = false
        Tab.Button.ClickArea.Transparency = 0
        table.insert(DrawingObjects, Tab.Button.ClickArea)
        table.insert(Tab.DrawingObjects, Tab.Button.ClickArea)

        UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                local mousePos = input.Position
                if mousePos.X >= Tab.Button.ClickArea.Position.X and mousePos.X <= Tab.Button.ClickArea.Position.X + Tab.Button.ClickArea.Size.X and
                   mousePos.Y >= Tab.Button.ClickArea.Position.Y and mousePos.Y <= Tab.Button.ClickArea.Position.Y + Tab.Button.ClickArea.Size.Y then
                    -- Esconder todas as tabs
                    for i, v in pairs(GUI.Tabs or {}) do
                        v.Frame.Visible = false
                        v.Button.Color = Color3.fromRGB(35, 35, 35)
                        v.ButtonText.Color = Color3.fromRGB(117, 117, 117)
                    end
                    
                    -- Mostrar esta tab
                    Tab.Frame.Visible = true
                    Tab.Button.Color = Color3.fromRGB(102, 5, 172)
                    Tab.ButtonText.Color = Color3.fromRGB(255, 255, 255)
                end
            end
        end)

        -- Adicionar à lista de tabs
        GUI.Tabs = GUI.Tabs or {}
        table.insert(GUI.Tabs, Tab)

        return Tab
    end

    return GUI
end

return Library
