local Library = {}

-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Variáveis globais
local Mouse = Players.LocalPlayer:GetMouse()
local DrawingObjects = {}
local ActiveWindow = nil

-- Função GetXY para Drawing
local function GetXY(position, absolutePosition, absoluteSize)
    local mousePos = UserInputService:GetMouseLocation()
    local Px, Py = math.clamp(mousePos.X - absolutePosition.X, 0, absoluteSize.X), 
                   math.clamp(mousePos.Y - absolutePosition.Y, 0, absoluteSize.Y)
    return Px/absoluteSize.X, Py/absoluteSize.Y
end

-- Função para criar retângulos arredondados (simulação)
local function CreateRoundedFrame(properties)
    local frame = Drawing.new("Square")
    frame.Filled = properties.Filled or true
    frame.Color = properties.Color or Color3.new(1, 1, 1)
    frame.Size = properties.Size or Vector2.new(100, 100)
    frame.Position = properties.Position or Vector2.new(0, 0)
    frame.Visible = properties.Visible or true
    frame.Thickness = properties.Thickness or 1
    
    -- Simulação de cantos arredondados usando múltiplos quadrados
    local corners = {}
    if properties.Rounded then
        -- Esta é uma simulação básica - para cantos arredondados reais seria mais complexo
        frame.Rounding = properties.Rounding or 5
    end
    
    return frame, corners
end

-- Função para criar texto
local function CreateText(properties)
    local text = Drawing.new("Text")
    text.Text = properties.Text or ""
    text.Color = properties.Color or Color3.new(1, 1, 1)
    text.Size = properties.Size or 13
    text.Position = properties.Position or Vector2.new(0, 0)
    text.Visible = properties.Visible or true
    text.Center = properties.Center or false
    text.Outline = properties.Outline or false
    text.OutlineColor = properties.OutlineColor or Color3.new(0, 0, 0)
    text.Font = properties.Font or 2 -- 2 = System font
    
    return text
end

function Library:ToggleUI()
    if ActiveWindow then
        ActiveWindow.Visible = not ActiveWindow.Visible
        for _, obj in pairs(DrawingObjects) do
            if obj.Visible ~= nil then
                obj.Visible = ActiveWindow.Visible
            end
        end
    end
end

function Library:NewWindow(hubName, gameName, version, discord)
    -- Limpar objetos anteriores
    for _, obj in pairs(DrawingObjects) do
        obj:Remove()
    end
    DrawingObjects = {}

    hubName = hubName or "Jael Library"
    gameName = gameName or "Baseplate"
    version = version or "v1.0"
    discord = discord or "discord/00000"

    local GUI = {}
    local windowPosition = Vector2.new(200, 100)
    local windowSize = Vector2.new(683, 464)
    
    -- Main Window Frame
    GUI.MainFrame = Drawing.new("Square")
    GUI.MainFrame.Filled = true
    GUI.MainFrame.Color = Color3.fromRGB(26, 26, 26)
    GUI.MainFrame.Size = windowSize
    GUI.MainFrame.Position = windowPosition
    GUI.MainFrame.Visible = true
    table.insert(DrawingObjects, GUI.MainFrame)

    -- SideBar
    GUI.SideBar = Drawing.new("Square")
    GUI.SideBar.Filled = true
    GUI.SideBar.Color = Color3.fromRGB(36, 36, 36)
    GUI.SideBar.Size = Vector2.new(189, 464)
    GUI.SideBar.Position = windowPosition
    GUI.SideBar.Visible = true
    table.insert(DrawingObjects, GUI.SideBar)

    -- Hub Name Label
    GUI.HubNameLabel = CreateText({
        Text = hubName,
        Color = Color3.fromRGB(255, 255, 255),
        Size = 20,
        Position = windowPosition + Vector2.new(15, 15),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.HubNameLabel)

    -- Game Name Label
    GUI.GameNameLabel = CreateText({
        Text = gameName,
        Color = Color3.fromRGB(102, 5, 172),
        Size = 16,
        Position = windowPosition + Vector2.new(15, 45),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.GameNameLabel)

    -- Top Bar
    GUI.TopBar = Drawing.new("Square")
    GUI.TopBar.Filled = true
    GUI.TopBar.Color = Color3.fromRGB(36, 36, 36)
    GUI.TopBar.Size = Vector2.new(490, 41)
    GUI.TopBar.Position = windowPosition + Vector2.new(189, 0)
    GUI.TopBar.Visible = true
    table.insert(DrawingObjects, GUI.TopBar)

    -- Discord Label
    GUI.DiscordLabel = CreateText({
        Text = discord,
        Color = Color3.fromRGB(120, 138, 255),
        Size = 14,
        Position = windowPosition + Vector2.new(189 + 350, 15),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.DiscordLabel)

    -- Version Label
    GUI.VersionLabel = CreateText({
        Text = version,
        Color = Color3.fromRGB(255, 255, 255),
        Size = 12,
        Position = windowPosition + Vector2.new(189 + 400, 15),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.VersionLabel)

    -- Home Button
    GUI.HomeButton = Drawing.new("Square")
    GUI.HomeButton.Filled = true
    GUI.HomeButton.Color = Color3.fromRGB(102, 5, 172)
    GUI.HomeButton.Size = Vector2.new(135, 35)
    GUI.HomeButton.Position = windowPosition + Vector2.new(27, 100)
    GUI.HomeButton.Visible = true
    table.insert(DrawingObjects, GUI.HomeButton)

    GUI.HomeButtonText = CreateText({
        Text = "Home",
        Color = Color3.fromRGB(255, 255, 255),
        Size = 14,
        Position = windowPosition + Vector2.new(40, 108),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.HomeButtonText)

    -- Home Frame
    GUI.HomeFrame = Drawing.new("Square")
    GUI.HomeFrame.Filled = true
    GUI.HomeFrame.Color = Color3.fromRGB(36, 36, 36)
    GUI.HomeFrame.Size = Vector2.new(490, 419)
    GUI.HomeFrame.Position = windowPosition + Vector2.new(189, 41)
    GUI.HomeFrame.Visible = true
    table.insert(DrawingObjects, GUI.HomeFrame)

    -- Welcome Label
    GUI.WelcomeLabel = CreateText({
        Text = "Welcome, "..LocalPlayer.DisplayName.."!",
        Color = Color3.fromRGB(255, 255, 255),
        Size = 18,
        Position = windowPosition + Vector2.new(200, 60),
        Visible = true
    })
    table.insert(DrawingObjects, GUI.WelcomeLabel)

    -- Bar separator
    GUI.Bar = Drawing.new("Square")
    GUI.Bar.Filled = true
    GUI.Bar.Color = Color3.fromRGB(102, 5, 172)
    GUI.Bar.Size = Vector2.new(477, 1)
    GUI.Bar.Position = windowPosition + Vector2.new(195, 90)
    GUI.Bar.Visible = true
    table.insert(DrawingObjects, GUI.Bar)

    -- Features Frame
    GUI.FeaturesFrame = Drawing.new("Square")
    GUI.FeaturesFrame.Filled = true
    GUI.FeaturesFrame.Color = Color3.fromRGB(41, 41, 41)
    GUI.FeaturesFrame.Size = Vector2.new(477, 353)
    GUI.FeaturesFrame.Position = windowPosition + Vector2.new(195, 100)
    GUI.FeaturesFrame.Visible = true
    table.insert(DrawingObjects, GUI.FeaturesFrame)

    -- Sistema de drag
    local dragging = false
    local dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        windowPosition = startPos + delta
        
        -- Atualizar todas as posições
        GUI.MainFrame.Position = windowPosition
        GUI.SideBar.Position = windowPosition
        GUI.HubNameLabel.Position = windowPosition + Vector2.new(15, 15)
        GUI.GameNameLabel.Position = windowPosition + Vector2.new(15, 45)
        GUI.TopBar.Position = windowPosition + Vector2.new(189, 0)
        GUI.DiscordLabel.Position = windowPosition + Vector2.new(189 + 350, 15)
        GUI.VersionLabel.Position = windowPosition + Vector2.new(189 + 400, 15)
        GUI.HomeButton.Position = windowPosition + Vector2.new(27, 100)
        GUI.HomeButtonText.Position = windowPosition + Vector2.new(40, 108)
        GUI.HomeFrame.Position = windowPosition + Vector2.new(189, 41)
        GUI.WelcomeLabel.Position = windowPosition + Vector2.new(200, 60)
        GUI.Bar.Position = windowPosition + Vector2.new(195, 90)
        GUI.FeaturesFrame.Position = windowPosition + Vector2.new(195, 100)
    end

    GUI.TopBarInput = Drawing.new("Square")
    GUI.TopBarInput.Filled = true
    GUI.TopBarInput.Color = Color3.fromRGB(255, 255, 255)
    GUI.TopBarInput.Size = Vector2.new(490, 41)
    GUI.TopBarInput.Position = windowPosition + Vector2.new(189, 0)
    GUI.TopBarInput.Visible = false
    GUI.TopBarInput.Transparency = 0
    table.insert(DrawingObjects, GUI.TopBarInput)

    -- Input handling para drag
    UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            local topBarPos = GUI.TopBarInput.Position
            local topBarSize = GUI.TopBarInput.Size
            
            if mousePos.X >= topBarPos.X and mousePos.X <= topBarPos.X + topBarSize.X and
               mousePos.Y >= topBarPos.Y and mousePos.Y <= topBarPos.Y + topBarSize.Y then
                dragging = true
                dragStart = input.Position
                startPos = windowPosition
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            update(input)
        end
    end)

    ActiveWindow = GUI.MainFrame

    function GUI:FeatureNewGame(gameName)
        gameName = gameName or "- New Game"
        -- Implementação similar para features...
    end

    function GUI:FeatureNewFeature(featureLabel)
        featureLabel = featureLabel or "- New Feature"
        -- Implementação similar para features...
    end

    function GUI:NewTab(tabName)
        tabName = tabName or "New Tab"
        local Tab = {}
        
        -- Criar botão da tab
        local tabButton = Drawing.new("Square")
        tabButton.Filled = true
        tabButton.Color = Color3.fromRGB(35, 35, 35)
        tabButton.Size = Vector2.new(135, 35)
        tabButton.Position = windowPosition + Vector2.new(27, 150)
        tabButton.Visible = true
        table.insert(DrawingObjects, tabButton)

        local tabButtonText = CreateText({
            Text = tabName,
            Color = Color3.fromRGB(117, 117, 117),
            Size = 14,
            Position = windowPosition + Vector2.new(40, 158),
            Visible = true
        })
        table.insert(DrawingObjects, tabButtonText)

        -- Tab Frame
        local tabFrame = Drawing.new("Square")
        tabFrame.Filled = true
        tabFrame.Color = Color3.fromRGB(36, 36, 36)
        tabFrame.Size = Vector2.new(490, 419)
        tabFrame.Position = windowPosition + Vector2.new(189, 41)
        tabFrame.Visible = false
        table.insert(DrawingObjects, tabFrame)

        function Tab:NewLabel(label)
            label = label or "New Label"
            -- Implementação para labels...
        end

        function Tab:NewButton(label, callback)
            label = label or "New Button"
            callback = callback or function() end
            
            local Button = {}
            
            -- Implementação básica para botão com Drawing
            local buttonFrame = Drawing.new("Square")
            buttonFrame.Filled = true
            buttonFrame.Color = Color3.fromRGB(41, 41, 41)
            buttonFrame.Size = Vector2.new(478, 50)
            buttonFrame.Position = Vector2.new(0, 0) -- Posição será calculada
            buttonFrame.Visible = true
            
            local buttonText = CreateText({
                Text = label,
                Color = Color3.fromRGB(255, 255, 255),
                Size = 14,
                Position = Vector2.new(0, 0),
                Visible = true
            })
            
            -- Sistema de clique básico
            local buttonInput = Drawing.new("Square")
            buttonInput.Filled = true
            buttonInput.Color = Color3.fromRGB(255, 255, 255)
            buttonInput.Size = Vector2.new(478, 50)
            buttonInput.Position = Vector2.new(0, 0)
            buttonInput.Visible = false
            buttonInput.Transparency = 0
            
            table.insert(DrawingObjects, buttonFrame)
            table.insert(DrawingObjects, buttonText)
            table.insert(DrawingObjects, buttonInput)
            
            return Button
        end

        function Tab:NewSlider(label, min, max, default, callback)
			label = label or "New Slider"
			min = min or 0
			max = max or 100
			default = default or 50
			callback = callback or function() end

			local slider = {
				Value = default,
				Min = min,
				Max = max,
				Callback = callback
			}

			-- Calcula a posição do slider (assumindo que a Tab tem uma propriedade para armazenar a posição atual)
			local position = self.CurrentPosition or Vector2.new(0, 0)
			local size = Vector2.new(478, 50) -- Tamanho do slider

			-- Fundo do slider
			local background = Drawing.new("Square")
			background.Filled = true
			background.Color = Color3.fromRGB(41, 41, 41)
			background.Size = size
			background.Position = position
			background.Visible = true

			-- Texto do label
			local labelText = Drawing.new("Text")
			labelText.Text = label
			labelText.Color = Color3.fromRGB(255, 255, 255)
			labelText.Size = 14
			labelText.Position = position + Vector2.new(10, 10)
			labelText.Visible = true

			-- Texto do valor
			local valueText = Drawing.new("Text")
			valueText.Text = tostring(default)
			valueText.Color = Color3.fromRGB(255, 255, 255)
			valueText.Size = 14
			valueText.Position = position + Vector2.new(size.X - 40, 10)
			valueText.Visible = true

			-- Barra de progresso (fundo)
			local progressBackground = Drawing.new("Square")
			progressBackground.Filled = true
			progressBackground.Color = Color3.fromRGB(36, 36, 36)
			progressBackground.Size = Vector2.new(size.X - 20, 10)
			progressBackground.Position = position + Vector2.new(10, 30)
			progressBackground.Visible = true

			-- Barra de progresso (preenchimento)
			local progress = Drawing.new("Square")
			progress.Filled = true
			progress.Color = Color3.fromRGB(102, 5, 172)
			progress.Size = Vector2.new((default - min) / (max - min) * (size.X - 20), 10)
			progress.Position = position + Vector2.new(10, 30)
			progress.Visible = true

			-- Atualiza a posição atual para o próximo elemento
			self.CurrentPosition = position + Vector2.new(0, size.Y + 5)

			-- Função para atualizar o slider
			function slider:SetValue(value)
				value = math.clamp(value, min, max)
				self.Value = value
				valueText.Text = tostring(value)
				progress.Size = Vector2.new((value - min) / (max - min) * (size.X - 20), 10)
				callback(value)
			end

			-- Interatividade
			local dragging = false

			-- Função para atualizar o slider baseado na posição do mouse
			local function updateSlider(input)
				local relativeX = input.Position.X - progressBackground.Position.X
				local value = min + (relativeX / progressBackground.Size.X) * (max - min)
				slider:SetValue(value)
			end

			-- Conectar eventos de mouse
			UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					local mousePos = UserInputService:GetMouseLocation()
					if mousePos.X >= progressBackground.Position.X and mousePos.X <= progressBackground.Position.X + progressBackground.Size.X and
					mousePos.Y >= progressBackground.Position.Y and mousePos.Y <= progressBackground.Position.Y + progressBackground.Size.Y then
						dragging = true
						updateSlider(input)
					end
				end
			end)

			UserInputService.InputChanged:Connect(function(input)
				if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					updateSlider(input)
				end
			end)

			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)

			-- Armazenar os objetos para remover depois
			table.insert(self.DrawingObjects, background)
			table.insert(self.DrawingObjects, labelText)
			table.insert(self.DrawingObjects, valueText)
			table.insert(self.DrawingObjects, progressBackground)
			table.insert(self.DrawingObjects, progress)

			return slider
		end

        function Tab:NewToggle(label, callback)
			label = label or "New Toggle"
			callback = callback or function() end

			local toggle = {
				Value = false,
				Callback = callback
			}

			local position = self.CurrentPosition or Vector2.new(0, 0)
			local size = Vector2.new(478, 30)

			-- Fundo do toggle
			local background = Drawing.new("Square")
			background.Filled = true
			background.Color = Color3.fromRGB(41, 41, 41)
			background.Size = size
			background.Position = position
			background.Visible = true

			-- Texto do label
			local labelText = Drawing.new("Text")
			labelText.Text = label
			labelText.Color = Color3.fromRGB(255, 255, 255)
			labelText.Size = 14
			labelText.Position = position + Vector2.new(10, 8)
			labelText.Visible = true

			-- Toggle button
			local toggleButton = Drawing.new("Square")
			toggleButton.Filled = true
			toggleButton.Color = Color3.fromRGB(36, 36, 36)
			toggleButton.Size = Vector2.new(50, 20)
			toggleButton.Position = position + Vector2.new(size.X - 60, 5)
			toggleButton.Visible = true

			-- Toggle indicator
			local indicator = Drawing.new("Square")
			indicator.Filled = true
			indicator.Color = Color3.fromRGB(255, 81, 81)
			indicator.Size = Vector2.new(20, 20)
			indicator.Position = position + Vector2.new(size.X - 60, 5)
			indicator.Visible = true

			self.CurrentPosition = position + Vector2.new(0, size.Y + 5)

			function toggle:SetValue(value)
				self.Value = value
				if value then
					indicator.Color = Color3.fromRGB(2, 255, 108)
					indicator.Position = position + Vector2.new(size.X - 40, 5)
				else
					indicator.Color = Color3.fromRGB(255, 81, 81)
					indicator.Position = position + Vector2.new(size.X - 60, 5)
				end
				callback(value)
			end

			-- Interatividade
			local function toggleValue()
				toggle:SetValue(not toggle.Value)
			end

			-- Clique no toggle button
			UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					local mousePos = UserInputService:GetMouseLocation()
					if mousePos.X >= toggleButton.Position.X and mousePos.X <= toggleButton.Position.X + toggleButton.Size.X and
					mousePos.Y >= toggleButton.Position.Y and mousePos.Y <= toggleButton.Position.Y + toggleButton.Size.Y then
						toggleValue()
					end
				end
			end)

			table.insert(self.DrawingObjects, background)
			table.insert(self.DrawingObjects, labelText)
			table.insert(self.DrawingObjects, toggleButton)
			table.insert(self.DrawingObjects, indicator)

			return toggle
		end

        function Tab:NewDropdown(label, itemList, callback)
			label = label or "New Dropdown"
			itemList = itemList or {}
			callback = callback or function() end

			local dropdown = {
				Value = nil,
				Items = itemList,
				Callback = callback,
				Open = false
			}

			local position = self.CurrentPosition or Vector2.new(0, 0)
			local size = Vector2.new(478, 30)

			-- Fundo do dropdown
			local background = Drawing.new("Square")
			background.Filled = true
			background.Color = Color3.fromRGB(41, 41, 41)
			background.Size = size
			background.Position = position
			background.Visible = true

			-- Texto do label
			local labelText = Drawing.new("Text")
			labelText.Text = label
			labelText.Color = Color3.fromRGB(255, 255, 255)
			labelText.Size = 14
			labelText.Position = position + Vector2.new(10, 8)
			labelText.Visible = true

			-- Texto do valor selecionado
			local valueText = Drawing.new("Text")
			valueText.Text = "None"
			valueText.Color = Color3.fromRGB(255, 255, 255)
			valueText.Size = 14
			valueText.Position = position + Vector2.new(size.X - 100, 8)
			valueText.Visible = true

			-- Seta do dropdown
			local arrow = Drawing.new("Text")
			arrow.Text = "v"
			arrow.Color = Color3.fromRGB(255, 255, 255)
			arrow.Size = 14
			arrow.Position = position + Vector2.new(size.X - 20, 8)
			arrow.Visible = true

			-- Lista de itens (inicialmente invisível)
			local itemFrames = {}
			local itemTexts = {}

			local function toggleDropdown()
				dropdown.Open = not dropdown.Open
				for _, frame in ipairs(itemFrames) do
					frame.Visible = dropdown.Open
				end
				for _, text in ipairs(itemTexts) do
					text.Visible = dropdown.Open
				end
			end

			local function selectItem(item)
				dropdown.Value = item
				valueText.Text = item
				callback(item)
				toggleDropdown() -- Fecha o dropdown após seleção
			end

			-- Criar itens do dropdown
			for i, item in ipairs(itemList) do
				local itemPosition = position + Vector2.new(0, size.Y * i)
				local itemBackground = Drawing.new("Square")
				itemBackground.Filled = true
				itemBackground.Color = Color3.fromRGB(41, 41, 41)
				itemBackground.Size = size
				itemBackground.Position = itemPosition
				itemBackground.Visible = false

				local itemText = Drawing.new("Text")
				itemText.Text = item
				itemText.Color = Color3.fromRGB(255, 255, 255)
				itemText.Size = 14
				itemText.Position = itemPosition + Vector2.new(10, 8)
				itemText.Visible = false

				table.insert(itemFrames, itemBackground)
				table.insert(itemTexts, itemText)

				-- Interatividade para o item
				UserInputService.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 and dropdown.Open then
						local mousePos = UserInputService:GetMouseLocation()
						if mousePos.X >= itemBackground.Position.X and mousePos.X <= itemBackground.Position.X + itemBackground.Size.X and
						mousePos.Y >= itemBackground.Position.Y and mousePos.Y <= itemBackground.Position.Y + itemBackground.Size.Y then
							selectItem(item)
						end
					end
				end)
			end

			-- Interatividade para o dropdown
			UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					local mousePos = UserInputService:GetMouseLocation()
					if mousePos.X >= background.Position.X and mousePos.X <= background.Position.X + background.Size.X and
					mousePos.Y >= background.Position.Y and mousePos.Y <= background.Position.Y + background.Size.Y then
						toggleDropdown()
					end
				end
			end)

			self.CurrentPosition = position + Vector2.new(0, size.Y + 5)

			table.insert(self.DrawingObjects, background)
			table.insert(self.DrawingObjects, labelText)
			table.insert(self.DrawingObjects, valueText)
			table.insert(self.DrawingObjects, arrow)
			for _, frame in ipairs(itemFrames) do
				table.insert(self.DrawingObjects, frame)
			end
			for _, text in ipairs(itemTexts) do
				table.insert(self.DrawingObjects, text)
			end

			return dropdown
		end

        function Tab:NewBar()
			local position = self.CurrentPosition or Vector2.new(0, 0)
			local size = Vector2.new(478, 5)

			local bar = Drawing.new("Square")
			bar.Filled = true
			bar.Color = Color3.fromRGB(102, 5, 172)
			bar.Size = size
			bar.Position = position
			bar.Visible = true

			self.CurrentPosition = position + Vector2.new(0, size.Y + 5)

			table.insert(self.DrawingObjects, bar)

			return bar
		end

        function Tab:NewKeybind(label, key, callback)
			label = label or "New Keybind"
			key = key or "None"
			callback = callback or function() end

			local keybind = {
				Value = key,
				Callback = callback
			}

			local position = self.CurrentPosition or Vector2.new(0, 0)
			local size = Vector2.new(478, 30)

			-- Fundo do keybind
			local background = Drawing.new("Square")
			background.Filled = true
			background.Color = Color3.fromRGB(41, 41, 41)
			background.Size = size
			background.Position = position
			background.Visible = true

			-- Texto do label
			local labelText = Drawing.new("Text")
			labelText.Text = label
			labelText.Color = Color3.fromRGB(255, 255, 255)
			labelText.Size = 14
			labelText.Position = position + Vector2.new(10, 8)
			labelText.Visible = true

			-- Texto da tecla
			local keyText = Drawing.new("Text")
			keyText.Text = key
			keyText.Color = Color3.fromRGB(255, 255, 255)
			keyText.Size = 14
			keyText.Position = position + Vector2.new(size.X - 50, 8)
			keyText.Visible = true

			self.CurrentPosition = position + Vector2.new(0, size.Y + 5)

			-- Modo de edição
			local editing = false

			local function setKey(newKey)
				keybind.Value = newKey
				keyText.Text = newKey
				editing = false
			end

			UserInputService.InputBegan:Connect(function(input)
				if editing then
					if input.UserInputType == Enum.UserInputType.Keyboard then
						setKey(input.KeyCode.Name)
					elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
						setKey("MouseButton1")
					elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
						setKey("MouseButton2")
					elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
						setKey("MouseButton3")
					end
				else
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						local mousePos = UserInputService:GetMouseLocation()
						if mousePos.X >= keyText.Position.X and mousePos.X <= keyText.Position.X + 50 and
						mousePos.Y >= keyText.Position.Y and mousePos.Y <= keyText.Position.Y + 20 then
							editing = true
							keyText.Text = "..."
						end
					end
				end
			end)

			table.insert(self.DrawingObjects, background)
			table.insert(self.DrawingObjects, labelText)
			table.insert(self.DrawingObjects, keyText)

			return keybind
		end

        return Tab
    end

    return GUI
end

return Library
